cmake_minimum_required(VERSION 2.8.3)
project(ex_calibration)

set( CMAKE_BUILD_TYPE Release )
set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11" )
set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c++11" )


# set g2o path manually since the find cmake file is not good
set ( G2O_ROOT "/home/nick/Projects/g2o")

list(APPEND CMAKE_MODULE_PATH "${G2O_ROOT}/cmake_modules")
## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
	roscpp
	rospy
	std_msgs
	message_generation
	genmsg
	geometry_msgs
	sensor_msgs
	image_transport
	cv_bridge
	)


## System dependencies are found with CMake's conventions
find_package( PCL REQUIRED COMPONENTS)
find_package( Boost COMPONENTS system REQUIRED)
find_package( OpenCV REQUIRED )
find_package( Cholmod )
find_package( libpointmatcher  REQUIRED)

add_service_files(
	FILES
	ExCalibration.srv
	)

generate_messages(
	DEPENDENCIES
	std_msgs
	geometry_msgs
	sensor_msgs
	)

catkin_package(
	#  INCLUDE_DIRS include
	#  LIBRARIES beginner_tutorials
	#  CATKIN_DEPENDS roscpp rospy std_msgs
	#  DEPENDS system_lib
	)


###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
# include_directories(include)
include_directories(
	${PROJECT_SOURCE_DIR}/include
	${PROJECT_SOURCE_DIR}/thirdParty/json
	${PROJECT_SOURCE_DIR}/thirdParty/edlines
	${PROJECT_SOURCE_DIR}/thirdParty/lsd
	${catkin_INCLUDE_DIRS}
	${PCL_INCLUDE_DIRS}
	${Boost_INCLUDE_DIRS}
	${CHOLMOD_INCLUDE_DIRS}
	${G2O_ROOT}
	${libpointmatcher_INCLUDE_DIRS}
	)

aux_source_directory(
	${PROJECT_SOURCE_DIR}/src
	SRC_DIRS
	)

link_directories(
	${G2O_ROOT}/lib
	##${PCL_LIBRARY_DIRS}
	##${Boost_LIBRARY_DIRS}
	)


add_definitions(
	${PCL_DEFINITIONS}
	)

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
## add_dependencies(beginner_tutorials ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Declare a C++ executable


# main 
add_executable(
	demo
	${PROJECT_SOURCE_DIR}/main/app.cpp
	${SRC_DIRS}
	${PROJECT_SOURCE_DIR}/thirdParty/edlines/EDLineDetector.cpp
	)

target_link_libraries(
	demo
	${catkin_LIBRARIES}
	${PCL_LIBRARIES}
	${Boost_LIBRARIES}
	${OpenCV_LIBS}
	${CHOLMOD_LIBRARIES}
	g2o_core 
	g2o_stuff 
	g2o_solver_csparse 
	g2o_csparse_extension 
	g2o_types_slam3d 
	g2o_types_sba
	${libpointmatcher_LIBRARIES}
	)

# collect simulation data
add_executable(
	sim
	${PROJECT_SOURCE_DIR}/main/simulation.cpp
	${SRC_DIRS}
	${PROJECT_SOURCE_DIR}/thirdParty/edlines/EDLineDetector.cpp
	)

target_link_libraries(
	sim
	${catkin_LIBRARIES}
	${PCL_LIBRARIES}
	${Boost_LIBRARIES}
	${OpenCV_LIBS}
	${CHOLMOD_LIBRARIES}
	g2o_core 
	g2o_stuff 
	g2o_solver_csparse 
	g2o_csparse_extension 
	g2o_types_slam3d 
	g2o_types_sba
	${libpointmatcher_LIBRARIES}
	)

# test
add_executable(
	g2o
	${PROJECT_SOURCE_DIR}/main/g2o_ba_example.cpp
	)

target_link_libraries(
	g2o
	g2o_core g2o_types_slam3d g2o_solver_csparse g2o_stuff g2o_csparse_extension g2o_types_sba
	${OpenCV_LIBS}
	${CHOLMOD_LIBRARIES}
	)

add_executable(
	icp
	${PROJECT_SOURCE_DIR}/main/icp.cpp
	)

target_link_libraries(
	icp
	${libpointmatcher_LIBRARIES}
	)


add_executable(
	imgline
	${PROJECT_SOURCE_DIR}/main/img_lines.cpp
	${PROJECT_SOURCE_DIR}/thirdParty/edlines/EDLineDetector.cpp
	)

target_link_libraries(
	imgline
	${OpenCV_LIBS}
	)

add_executable(
	pcline
	${PROJECT_SOURCE_DIR}/main/pc_lines.cpp
	)

target_link_libraries(
	pcline
	${OpenCV_LIBS}
	${PCL_LIBRARIES}
	${Boost_LIBRARIES}
	)

add_executable(
	pc2img
	${PROJECT_SOURCE_DIR}/main/pc_depth_image.cpp
	${PROJECT_SOURCE_DIR}/thirdParty/edlines/EDLineDetector.cpp
	${PROJECT_SOURCE_DIR}/thirdParty/lsd/lsd.cpp
	)

target_link_libraries(
	pc2img
	${OpenCV_LIBS}
	${PCL_LIBRARIES}
	${Boost_LIBRARIES}
	)

